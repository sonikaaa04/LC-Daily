//T(n) = o(n)
//S(n)=O(2n)
class Solution {
    public String pushDominoes(String dominoes) {
        int n = dominoes.length();
        int[] leftClosestR = new int[n];
        int[] rightClosestL = new int[n];
        //traverse left to right to find leftClosestR
        for(int i=0; i<n; i++){
            if(dominoes.charAt(i)=='R')
                leftClosestR[i]=i;
            else if(dominoes.charAt(i)=='L')
                leftClosestR[i]=-1;
            else if(dominoes.charAt(i)=='.')
                leftClosestR[i]= i>0 ? leftClosestR[i-1]:-1;
        }

        //traverse right to left to find rightClosestL
        for(int i=n-1; i>=0; i--){
            if(dominoes.charAt(i)=='L')
                rightClosestL[i]=i;
            else if(dominoes.charAt(i)=='R')
                rightClosestL[i]=-1;
            else
                rightClosestL[i] = i<n-1? rightClosestL[i+1]:-1;
        }

        ///final result
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int distRightL = rightClosestL[i] == -1 ? Integer.MAX_VALUE : Math.abs(i - rightClosestL[i]);
            int distLeftR = leftClosestR[i] == -1 ? Integer.MAX_VALUE : Math.abs(i - leftClosestR[i]);

            if (rightClosestL[i] == leftClosestR[i])
             result.append('.');
            else if (rightClosestL[i] == -1)
                result.append('R');
            else if (leftClosestR[i] == -1)
                result.append('L');
            else if (distLeftR == distRightL)
                result.append('.');
            else
                result.append(distRightL < distLeftR ? 'L' : 'R');
        }
        return result.toString();
    }
}
