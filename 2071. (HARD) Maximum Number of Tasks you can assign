class Solution {
    boolean check(int[] tasks, int[] workers, int pills, int strength, int mid){
        int p = pills;
        int n = tasks.length;
        int m = workers.length;
        TreeMap<Integer, Integer> multiset = new TreeMap<>();
        for(int i=m-mid; i<m; i++){ //store the strongest mid number of workers
            multiset.put(workers[i], multiset.getOrDefault(workers[i],0)+1);
        }

        for(int i=mid-1; i>=0; i--){
            Integer key = multiset.lastKey();
            if(key>=tasks[i]){ //no need to use pill
                multiset.put(key, multiset.get(key)-1);
                if(multiset.get(key)==0)
                    multiset.remove(key);
                
            }
            else{ //pill reqd
                if(p==0) return false;
                key = multiset.ceilingKey(tasks[i]-strength); //lowerbound
                if(key==null)
                    return false;
                multiset.put(key, multiset.get(key)-1);
                if(multiset.get(key)==0){
                    multiset.remove(key);
                }
                p--;
            }
        }
        return true;
    }
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);
        int n = tasks.length;
        int m = workers.length;
        int l=0, r=Math.min(m,n);
        int ans = 0;
        while(l<=r){
            int mid = (l+r)/2;
            if(check(tasks, workers, pills, strength, mid)){
                ans=mid;
                l=mid+1;
            }
            else
                r=mid-1;
        }
        return ans;
    }
}
